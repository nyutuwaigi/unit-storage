var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var GoogleAnalyticsOriginal = /** @class */ (function (_super) {
    __extends(GoogleAnalyticsOriginal, _super);
    function GoogleAnalyticsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoogleAnalyticsOriginal.prototype.startTrackerWithId = function (id, interval) { return cordova(this, "startTrackerWithId", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    GoogleAnalyticsOriginal.prototype.setAllowIDFACollection = function (allow) { return cordova(this, "setAllowIDFACollection", {}, arguments); };
    GoogleAnalyticsOriginal.prototype.setUserId = function (id) { return cordova(this, "setUserId", {}, arguments); };
    GoogleAnalyticsOriginal.prototype.setAnonymizeIp = function (anonymize) { return cordova(this, "setAnonymizeIp", {}, arguments); };
    GoogleAnalyticsOriginal.prototype.setAppVersion = function (appVersion) { return cordova(this, "setAppVersion", {}, arguments); };
    GoogleAnalyticsOriginal.prototype.getVar = function (key) { return cordova(this, "getVar", {}, arguments); };
    GoogleAnalyticsOriginal.prototype.setVar = function (key, value) { return cordova(this, "setVar", {}, arguments); };
    GoogleAnalyticsOriginal.prototype.setOptOut = function (optout) { return cordova(this, "setOptOut", {}, arguments); };
    GoogleAnalyticsOriginal.prototype.debugMode = function () { return cordova(this, "debugMode", {}, arguments); };
    GoogleAnalyticsOriginal.prototype.trackMetric = function (key, value) { return cordova(this, "trackMetric", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    GoogleAnalyticsOriginal.prototype.trackView = function (title, campaignUrl, newSession) { return cordova(this, "trackView", { "successIndex": 3, "errorIndex": 4 }, arguments); };
    GoogleAnalyticsOriginal.prototype.addCustomDimension = function (key, value) { return cordova(this, "addCustomDimension", {}, arguments); };
    GoogleAnalyticsOriginal.prototype.trackEvent = function (category, action, label, value, newSession) { return cordova(this, "trackEvent", { "successIndex": 5, "errorIndex": 6 }, arguments); };
    GoogleAnalyticsOriginal.prototype.trackException = function (description, fatal) { return cordova(this, "trackException", {}, arguments); };
    GoogleAnalyticsOriginal.prototype.trackTiming = function (category, intervalInMilliseconds, variable, label) { return cordova(this, "trackTiming", {}, arguments); };
    GoogleAnalyticsOriginal.prototype.addTransaction = function (id, affiliation, revenue, tax, shipping, currencyCode) { return cordova(this, "addTransaction", {}, arguments); };
    GoogleAnalyticsOriginal.prototype.addTransactionItem = function (id, name, sku, category, price, quantity, currencyCode) { return cordova(this, "addTransactionItem", {}, arguments); };
    GoogleAnalyticsOriginal.prototype.enableUncaughtExceptionReporting = function (shouldEnable) { return cordova(this, "enableUncaughtExceptionReporting", {}, arguments); };
    GoogleAnalyticsOriginal.prototype.dispatch = function () { return cordova(this, "dispatch", { "platforms": ["Android", "iOS", "Windows"] }, arguments); };
    GoogleAnalyticsOriginal.pluginName = "GoogleAnalytics";
    GoogleAnalyticsOriginal.plugin = "cordova-plugin-google-analytics";
    GoogleAnalyticsOriginal.pluginRef = "ga";
    GoogleAnalyticsOriginal.repo = "https://github.com/danwilson/google-analytics-plugin";
    GoogleAnalyticsOriginal.platforms = ["Android", "Browser", "iOS", "Windows Phone 8"];
    return GoogleAnalyticsOriginal;
}(IonicNativePlugin));
var GoogleAnalytics = new GoogleAnalyticsOriginal();
export { GoogleAnalytics };
//# sourceMappingURL=data:application/json;base64,